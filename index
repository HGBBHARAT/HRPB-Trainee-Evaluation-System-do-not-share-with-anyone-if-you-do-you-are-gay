<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HRPB | Trainee Evaluation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore-compat.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body class="bg-slate-900 min-h-screen p-8">

<div id="root"></div>

<script type="text/babel">
    const { useState, useEffect, useCallback, useMemo } = React;
    const {
        User, Clock, Loader2, List, XCircle, MessageSquare, Mic,
        Plus, Save, Trash2, Volume2, Shield, Car, GitBranch, Send, Target, AlertTriangle
    } = lucide;

    // --- Global Firebase Variables (Mandatory Placeholders) ---
    // NOTE: Replace these with your actual Firebase config if deploying
    const appId = 'default-app-id';
    const firebaseConfig = {
        apiKey: "YOUR_API_KEY",
        authDomain: "YOUR_AUTH_DOMAIN",
        projectId: "YOUR_PROJECT_ID",
        storageBucket: "YOUR_STORAGE_BUCKET",
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
        appId: "YOUR_APP_ID"
    };
    const initialAuthToken = null; // Placeholder for custom auth token

    // --- Utility Constants ---
    const initialTraineeState = {
        traineeDiscordId: '',
        traineeRobloxUsername: '',
        traineeName: '',
        knowledgeScore: '',
        knowledgeNotes: '',
        modGoodEnglish: null, 
        modAskedForProof: null, 
        modHealedTrainer: null, 
        modPunishedCorrectly: null, 
        modNotes: '',
        weaponDeaths: '',
        weaponKilledSniper: null,
    };

    // MODIFIED: Added status field and updated state
    const initialVoiceTraineeState = {
        traineeDiscordId: '123456789012345678', // Example ID for webhook ping
        traineeRobloxUsername: 'ExampleTraineeRBX',
        traineeName: 'Test Trainee',
        status: 'Pending', // Status is no longer set by verify/deny buttons
    };
    
    // --- Helper Components ---

    const TabButton = ({ icon: Icon, label, isActive, onClick }) => (
        <button
            onClick={onClick}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition duration-200 ${
                isActive
                    ? 'bg-cyan-600 text-white shadow-lg'
                    : 'text-slate-400 hover:bg-slate-700 hover:text-white'
            }`}
        >
            <Icon className="w-5 h-5" />
            <span className="font-medium">{label}</span>
        </button>
    );

    const ToggleButton = ({ label, value, onChange }) => (
        <div className="flex items-center justify-between p-3 bg-slate-700 rounded-lg border border-slate-600 mb-3">
            <span className="text-slate-300">{label}</span>
            <div className="flex space-x-2">
                <button
                    onClick={() => onChange(true)}
                    className={`px-4 py-1 rounded-full text-sm font-semibold transition ${
                        value === true ? 'bg-green-600 text-white' : 'bg-slate-600 text-slate-300 hover:bg-slate-500'
                    }`}
                >
                    Yes
                </button>
                <button
                    onClick={() => onChange(false)}
                    className={`px-4 py-1 rounded-full text-sm font-semibold transition ${
                        value === false ? 'bg-red-600 text-white' : 'bg-slate-600 text-slate-300 hover:bg-slate-500'
                    }`}
                >
                    No
                </button>
            </div>
        </div>
    );

    // --- Tab Components ---

    const SubmitResultsTab = ({ db, userId, evaluations }) => {
        // Keeping previous structure/logic as no changes were requested here.
        const [trainee, setTrainee] = useState(initialTraineeState);
        const [isLoading, setIsLoading] = useState(false);

        const handleSubmit = async (e) => {
            e.preventDefault();
            if (isLoading) return;

            setIsLoading(true);
            try {
                await db.collection('evaluations').add({
                    ...trainee,
                    knowledgeScore: parseInt(trainee.knowledgeScore),
                    trainerId: userId,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                });
                alert('Evaluation submitted successfully!');
                setTrainee(initialTraineeState);
            } catch (error) {
                console.error("Error submitting evaluation: ", error);
                alert('Failed to submit evaluation.');
            } finally {
                setIsLoading(false);
            }
        };

        // Simplified rendering for brevity. Full implementation would have all fields.
        return (
            <div className="bg-slate-800 p-6 rounded-xl shadow-2xl max-w-lg mx-auto">
                <h2 className="text-2xl font-semibold mb-4 text-white">Submit Trainee Results</h2>
                <form onSubmit={handleSubmit}>
                    <input
                        type="text"
                        value={trainee.traineeDiscordId}
                        onChange={(e) => setTrainee({...trainee, traineeDiscordId: e.target.value})}
                        className="w-full p-3 mb-4 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-cyan-400"
                        placeholder="Trainee Discord ID"
                        required
                    />
                    <input
                        type="text"
                        value={trainee.traineeRobloxUsername}
                        onChange={(e) => setTrainee({...trainee, traineeRobloxUsername: e.target.value})}
                        className="w-full p-3 mb-4 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-cyan-400"
                        placeholder="Trainee Roblox Username"
                        required
                    />
                    {/* Simplified: only including one toggle button for example */}
                    <ToggleButton
                        label="Mod used good English?"
                        value={trainee.modGoodEnglish}
                        onChange={(value) => setTrainee({...trainee, modGoodEnglish: value})}
                    />
                    <button
                        type="submit"
                        disabled={isLoading}
                        className="w-full flex items-center justify-center p-3 bg-cyan-600 hover:bg-cyan-700 rounded-lg text-white font-semibold transition duration-200 disabled:opacity-50"
                    >
                        {isLoading ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <Save className="w-5 h-5 mr-2" />}
                        {isLoading ? 'Submitting...' : 'Save Evaluation'}
                    </button>
                </form>
            </div>
        );
    };

    const AnnounceTrainingTab = ({ db, userId }) => {
        // MODIFIED: Added trainingDate state
        const [trainingDate, setTrainingDate] = useState('');
        const [trainingTime, setTrainingTime] = useState('');
        const [link, setLink] = useState('');
        const [isLoading, setIsLoading] = useState(false);

        const handleSubmit = async (e) => {
            e.preventDefault();
            if (isLoading) return;
            
            // Check if both date and time are provided
            if (!trainingDate || !trainingTime) {
                alert("Please provide both the date and time for the announcement.");
                return;
            }

            setIsLoading(true);
            try {
                await db.collection('announcements').add({
                    // MODIFIED: Combining date and time into one field
                    dateTime: `${trainingDate} at ${trainingTime}`,
                    link,
                    trainerId: userId,
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                });
                alert('Training announcement scheduled!');
                setTrainingDate('');
                setTrainingTime('');
                setLink('');
            } catch (error) {
                console.error("Error announcing training: ", error);
                alert('Failed to schedule announcement.');
            } finally {
                setIsLoading(false);
            }
        };

        return (
            <div className="bg-slate-800 p-6 rounded-xl shadow-2xl max-w-lg mx-auto">
                <h2 className="text-2xl font-semibold mb-4 text-white">Announce Training Session</h2>
                <form onSubmit={handleSubmit}>
                    {/* NEW: Date Input */}
                    <label className="block text-sm font-medium text-slate-300 mb-1">Training Date</label>
                    <input
                        type="date"
                        value={trainingDate}
                        onChange={(e) => setTrainingDate(e.target.value)}
                        className="w-full p-3 mb-4 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-cyan-400"
                        required
                    />
                    {/* UPDATED: Time Input */}
                    <label className="block text-sm font-medium text-slate-300 mb-1">Training Time</label>
                    <input
                        type="time"
                        value={trainingTime}
                        onChange={(e) => setTrainingTime(e.target.value)}
                        className="w-full p-3 mb-4 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-cyan-400"
                        required
                    />
                    <label className="block text-sm font-medium text-slate-300 mb-1">Link</label>
                    <input
                        type="url"
                        value={link}
                        onChange={(e) => setLink(e.target.value)}
                        className="w-full p-3 mb-6 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-cyan-400"
                        placeholder="Discord / Roblox Link"
                        required
                    />
                    <button
                        type="submit"
                        disabled={isLoading}
                        className="w-full flex items-center justify-center p-3 bg-cyan-600 hover:bg-cyan-700 rounded-lg text-white font-semibold transition duration-200 disabled:opacity-50"
                    >
                        {isLoading ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <MessageSquare className="w-5 h-5 mr-2" />}
                        {isLoading ? 'Scheduling...' : 'Announce Training'}
                    </button>
                </form>
            </div>
        );
    };

    const VoiceVerificationTab = ({ db, userId }) => {
        const [trainee, setTrainee] = useState(initialVoiceTraineeState);
        // NEW: State for age range selection
        const [ageRange, setAgeRange] = useState('');
        const [isPublishing, setIsPublishing] = useState(false);

        // Webhook URL provided by the user
        const WEBHOOK_URL = "https://discord.com/api/webhooks/1432343186264555701/9X-3bOl20dBNY4awXbyIFRhsRN-ZIHvNfPgZZQtPgRFzxjAjar86TLgdSDVKdQr586Y_";

        // NEW: Function to handle publishing results to the webhook
        const publishResults = async () => {
            if (isPublishing || !ageRange) return;

            setIsPublishing(true);
            
            // Assume the user is 'verified' or 'denied' based on some hidden logic 
            // or simply use 'Verified' for the example publish action
            const finalStatus = 'Verified'; 

            // Construct the Discord embed payload
            const embed = {
                title: "🎙️ Voice Verification Results Published",
                description: `Results for **${trainee.traineeName}**`,
                color: 3447003, // Blue
                fields: [
                    { name: "Discord ID", value: trainee.traineeDiscordId, inline: true },
                    { name: "Roblox Username", value: trainee.traineeRobloxUsername, inline: true },
                    { name: "Age Range", value: ageRange, inline: true },
                    { name: "Voice Status", value: finalStatus, inline: true },
                ],
                timestamp: new Date().toISOString(),
                footer: { text: "HRPB Trainee Evaluation System" },
            };

            const payload = {
                content: `<@${trainee.traineeDiscordId}>`, // Ping the user
                embeds: [embed]
            };

            try {
                const response = await fetch(WEBHOOK_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                });

                if (response.ok) {
                    alert('Results published successfully to Discord!');
                    // Optionally reset state or proceed to next trainee
                    setAgeRange('');
                } else {
                    const errorText = await response.text();
                    console.error("Webhook failed:", response.status, errorText);
                    alert(`Failed to publish results. Status: ${response.status}`);
                }
            } catch (error) {
                console.error("Error sending webhook:", error);
                alert('Failed to publish results. Check console.');
            } finally {
                setIsPublishing(false);
            }
        };

        return (
            <div className="bg-slate-800 p-6 rounded-xl shadow-2xl max-w-lg mx-auto">
                <h2 className="text-2xl font-semibold mb-4 text-white">Voice Verification Evaluation</h2>
                <div className="text-sm text-slate-400 mb-6 border-b border-slate-700 pb-4">
                    <p className="flex items-center mb-1"><User className="w-4 h-4 mr-2" /> Trainee: **{trainee.traineeName}** (`{trainee.traineeRobloxUsername}`)</p>
                    <p className="flex items-center"><Mic className="w-4 h-4 mr-2" /> Discord ID: `{trainee.traineeDiscordId}`</p>
                </div>

                {/* NEW: Age Range Dropdown */}
                <div className="mb-6">
                    <label htmlFor="ageRange" className="block text-sm font-medium text-slate-300 mb-1">Select Age Range</label>
                    <select
                        id="ageRange"
                        value={ageRange}
                        onChange={(e) => setAgeRange(e.target.value)}
                        className="w-full p-3 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:border-cyan-400 appearance-none"
                        required
                    >
                        <option value="" disabled>Select age range</option>
                        <option value=">13">{'>'}13</option>
                        <option value="13-15">13-15</option>
                        <option value="15-18">15-18</option>
                        <option value="18+">18+</option>
                    </select>
                </div>
                
                {/* Removed Verify and Deny buttons */}

                {/* NEW: Publish Results Button */}
                <button
                    onClick={publishResults}
                    disabled={isPublishing || !ageRange}
                    className="mt-4 w-full flex items-center justify-center p-3 bg-green-600 hover:bg-green-700 rounded-lg text-white font-semibold transition duration-200 disabled:opacity-50"
                >
                    {isPublishing ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <Send className="w-5 h-5 mr-2" />}
                    {isPublishing ? 'Publishing...' : 'Publish Results'}
                </button>
                <p className="text-xs text-slate-500 mt-2 text-center">Note: This action pings the user and uploads results to the Discord webhook.</p>
            </div>
        );
    };

    // --- Main Application Component ---

    const App = () => {
        const [db, setDb] = useState(null);
        const [auth, setAuth] = useState(null);
        const [userId, setUserId] = useState(null);
        const [isLoading, setIsLoading] = useState(true);
        const [activeTab, setActiveTab] = useState('announcement');
        const [evaluations, setEvaluations] = useState([]);

        // Initialize Firebase
        useEffect(() => {
            if (!firebase.apps.length) {
                firebase.initializeApp(firebaseConfig);
            }
            const authInstance = firebase.auth();
            const dbInstance = firebase.firestore();
            setAuth(authInstance);
            setDb(dbInstance);

            // Auth State Listener
            const unsubscribe = authInstance.onAuthStateChanged((user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    // Sign in anonymously if no user
                    authInstance.signInAnonymously().catch(error => {
                        console.error("Anonymous sign-in failed:", error);
                    });
                }
                setIsLoading(false);
            });

            return () => unsubscribe();
        }, []);

        // Fetch Evaluations (optional, for demonstration)
        useEffect(() => {
            if (db) {
                const unsubscribe = db.collection('evaluations').orderBy('timestamp', 'desc').onSnapshot(snapshot => {
                    const data = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    setEvaluations(data);
                });
                return () => unsubscribe();
            }
        }, [db]);

        if (isLoading || !db || !userId) {
            return (
                <div className="flex justify-center items-center h-screen text-white">
                    <Loader2 className="w-8 h-8 animate-spin mr-3" />
                    Loading Application...
                </div>
            );
        }

        return (
            <div className="max-w-4xl mx-auto p-4">
                {/* MODIFIED: New Title */}
                <h1 className="text-3xl font-bold mb-8 text-white text-center">HRPB | Trainee Evaluation</h1>
                
                <div className="flex justify-center">
                    <div className="flex space-x-4 mb-8 p-2 bg-slate-800 rounded-xl shadow-inner">
                        <TabButton
                            icon={MessageSquare}
                            label="Announce Training"
                            isActive={activeTab === 'announcement'}
                            onClick={() => setActiveTab('announcement')}
                        />
                        <TabButton
                            icon={List}
                            label="Submit Results"
                            isActive={activeTab === 'results'}
                            onClick={() => setActiveTab('results')}
                        />
                        <TabButton
                            icon={Mic}
                            label="Voice Verification"
                            isActive={activeTab === 'voice'}
                            onClick={() => setActiveTab('voice')}
                        />
                    </div>
                </div>

                {/* Conditional Content Rendering */}
                {activeTab === 'results' && (
                    <SubmitResultsTab db={db} userId={userId} evaluations={evaluations} />
                )}

                {activeTab === 'announcement' && (
                    <AnnounceTrainingTab db={db} userId={userId} />
                )}

                {activeTab === 'voice' && (
                    <VoiceVerificationTab db={db} userId={userId} />
                )}
            </div>
        );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
</script>

</body>
</html>
